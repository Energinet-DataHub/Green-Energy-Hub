name: Databricks Aggregator Job Deploy

on:
  workflow_dispatch:
    inputs:
      beginning_date_time:
        description: 'Aggregation Beginning Date Time'
        required: true
        default: '2020-10-02T00:00:00+0100'
      end_date_time:
        description: 'Aggregation End Date Time'
        required: true
        default: '2020-10-03T00:00:00+0100'

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  databricks_aggregation_job_deploy:
    # Name the Job
    name: Create Databricks Aggregation Job
    # Set the type of machine to run on
    # Resource Group set for automated trigger purposes, if ran manually it is overriden
    # All ENV Vars set bellow are needed for all the actions to run successfuly
    runs-on: ubuntu-latest
    env:
      WHEEL_VERSION: "1.0"
      WHEEL_STORAGE_ADDRESS: https://enrgtwheels.blob.core.windows.net/wheels/
      TF_VAR_python_main_file: "dbfs:/streaming/hourly_consumption_aggregation.py"

    steps:
      
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Construct Wheel File Name
        uses: ./.github/actions/construct-wheel-file-name

      - name: Read Pipeline Configuration
        uses: ./.github/actions/read-pipeline-configuration

      - name: Read Client Secret
        env:
          SECRET_NAME: CLIENT_SECRET_${{ env.UPPERCASE_ENV_NAME }}
        run: |  
          echo "ARM_CLIENT_SECRET=${{ secrets[env.SECRET_NAME] }}" >> $GITHUB_ENV
    
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.1
        with:
          terraform_wrapper: false
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified

      - name: Configure Azure CLI
        uses: ./.github/actions/azure-cli-install-login

      - name: Set TF Vars
        run: |
          echo "TF_VAR_client_secret=${{ env.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_tenant_id=${{ env.ARM_TENANT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_client_id=${{ env.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_storage_account_name=enrgnt${{ env.ENV_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_backend_storage_name=entfstate${{ env.ENV_NAME }}" >> $GITHUB_ENV

      # Run only if workflow started on demand (manually triggered)
      - name: Set TF Vars from Pipeline Inputs
        run: |
          echo "TF_VAR_beginning_date_time=${{ github.event.inputs.beginning_date_time }}" >> $GITHUB_ENV
          echo "TF_VAR_end_date_time=${{ github.event.inputs.end_date_time }}" >> $GITHUB_ENV
        if:   github.event.inputs.end_date_time

      - name: Obtain Databricks Workspace ID and Url
        id: obtain-db-id-url
        uses: ./.github/actions/obtain-databricks-id-url
        
      - name: Set databricks_id TF Var  
        run: |
          echo "TF_VAR_databricks_id=${{ steps.obtain-db-id-url.outputs.workspace-id }}" >> $GITHUB_ENV 

      - name: Databricks CLI Install and Connect
        uses: ./.github/actions/databricks-cli-install-connect
        with:
          workspace-url: ${{ steps.obtain-db-id-url.outputs.workspace-url }}
    
      - uses: suisei-cn/actions-download-file@v1
        name: Download the Wheel File
        with:
          url: "${{ env.WHEEL_STORAGE_ADDRESS }}${{ env.WHEEL_FILE_NAME }}"
          target: wheels/

      - name: Copy Wheel File to Databricks Workspace
        uses: ./.github/actions/copy-wheel-file-to-databricks

      - name: Copy Job Definition to DBFS
        run: |    
          dbfs cp --overwrite ./src/streaming/hourly_consumption_aggregation.py ${{ env.TF_VAR_python_main_file }}
      
      - name: Obtain Keyvault ID
        id: obtain-keyvault-id 
        uses: ./.github/actions/obtain-keyvault-id

      - name:  Set keyvault_id TF Var  
        run: | 
          echo "TF_VAR_keyvault_id=${{ steps.obtain-keyvault-id.outputs.keyvault-id }}" >> $GITHUB_ENV

      # Create aggregation job
      - name: Terraform Databricks Init
        working-directory: ./build/terraform/databricks_aggregation_job
        run: terraform init -backend-config="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" -backend-config="storage_account_name=enrgtfstate${{ env.ENV_NAME }}"
                  
      - name: Terraform Databricks Apply
        id: terraform-apply 
        working-directory: ./build/terraform/databricks_aggregation_job
        run: |
          terraform apply -no-color -auto-approve
          echo "::set-output name=job-id::$(terraform output databricks_job_id)"
        continue-on-error: false

      - name: Databricks CLI Run the Job
        id: run-job
        uses: ./.github/actions/databricks-cli-run-job
        with:
          job-id: ${{ steps.terraform-apply.outputs.job-id }}
      
      #Keep retries parameter set to 0 for jobs which might run in parallel
      - name: Check Job Status
        working-directory: ./build
        run: |
          pip install configargparse
          pip install requests
          python -u job_status_check.py --job-run-ids  ${{ steps.run-job.outputs.job-run-id }} --retries 0 --databricks-url 'https://${{ steps.obtain-db-id-url.outputs.workspace-url }}' --token ${{ env.DATABRICKS_AAD_TOKEN }}